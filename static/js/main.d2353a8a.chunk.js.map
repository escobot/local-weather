{"version":3,"sources":["components/SeasonDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["SeasonDisplay","props","temp","info","city","App","APP_ID","state","err","window","navigator","geolocation","getCurrentPosition","position","fetchValues","coords","latitude","longitude","setState","lat","lon","a","axios","get","this","values","data","name","main","weather","description","className","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAUeA,EAVO,SAACC,GACnB,OACI,gCACI,6BAAKA,EAAMC,OACX,6BAAKD,EAAME,OACX,6BAAKF,EAAMG,WCwCRC,E,4MAtCbC,OAAS,kC,EACTC,MAAQ,CACNH,KAAM,KACNF,KAAM,KACNC,KAAM,KACNK,IAAK,S,uDAGP,WAAqB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,YAAYD,EAASE,OAAOC,SAAUH,EAASE,OAAOE,cACvE,SAAAT,GAAG,OAAI,EAAKU,SAAS,CAAEV,a,gEAI3B,WAAkBW,EAAKC,GAAvB,eAAAC,EAAA,sEACuBC,IAAMC,IAAN,6DAAgEJ,EAAhE,gBAA2EC,EAA3E,kBAAwFI,KAAKlB,SADpH,OACQmB,EADR,OAEED,KAAKN,SAAS,CACZd,KAAMqB,EAAOC,KAAKC,KAClBzB,KAAMuB,EAAOC,KAAKE,KAAK1B,KACvBC,KAAMsB,EAAOC,KAAKG,QAAQ,GAAGC,cALjC,gD,6EASA,WACE,OAAIN,KAAKjB,MAAMH,KAEX,qBAAK2B,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACI,cAAC,EAAD,CAAe3B,KAAMoB,KAAKjB,MAAMH,KAAMF,KAAMsB,KAAKjB,MAAML,KAAMC,KAAMqB,KAAKjB,MAAMJ,WAK7E,6BAAKqB,KAAKjB,MAAMC,U,GApCbwB,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2353a8a.chunk.js","sourcesContent":["const SeasonDisplay = (props) => {\n    return (\n        <div>\n            <h2>{props.temp}</h2>\n            <h2>{props.info}</h2>\n            <h2>{props.city}</h2>\n        </div>\n    );\n};\n\nexport default SeasonDisplay;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SeasonDisplay from './components/SeasonDisplay';\n\nclass App extends React.Component {\n\n  APP_ID = 'b3f15555f7e25985e095c86fbe6ad0d'\n  state = { \n    city: null, \n    temp: null, \n    info: null, \n    err: 'error' \n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.fetchValues(position.coords.latitude, position.coords.longitude),\n      err => this.setState({ err })\n    );\n  }\n\n  async fetchValues(lat, lon) {\n    const values = await axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${this.APP_ID}`);\n    this.setState({ \n      city: values.data.name,\n      temp: values.data.main.temp, \n      info: values.data.weather[0].description\n    });\n  }\n\n  render() {\n    if (this.state.city)\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n              <SeasonDisplay city={this.state.city} temp={this.state.temp} info={this.state.info} />\n          </header>\n        </div>\n      );\n    else\n        return <h1>{this.state.err}</h1>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}